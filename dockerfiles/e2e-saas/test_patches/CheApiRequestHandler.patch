diff --git a/tests/e2e/utils/requestHandlers/CheApiRequestHandler.ts b/tests/e2e/utils/requestHandlers/CheApiRequestHandler.ts
index 4d9ab66fa9..5d061062d1 100644
--- a/tests/e2e/utils/requestHandlers/CheApiRequestHandler.ts
+++ b/tests/e2e/utils/requestHandlers/CheApiRequestHandler.ts
@@ -8,11 +8,12 @@
  * SPDX-License-Identifier: EPL-2.0
  **********************************************************************/
 
-import axios, { AxiosResponse } from 'axios';
+import axios, { AxiosResponse, AxiosRequestConfig } from 'axios';
 import { TestConstants } from '../../TestConstants';
 import { TYPES } from '../../inversify.types';
 import { inject, injectable } from 'inversify';
 import { IAuthorizationHeaderHandler } from './headers/IAuthorizationHeaderHandler';
+import lodash from 'lodash';
 
 @injectable()
 export class CheApiRequestHandler {
@@ -30,6 +31,37 @@ export class CheApiRequestHandler {
         return await axios.delete(this.assembleUrl(relativeUrl), await this.headerHandler.get());
     }
 
+    /**
+     * This method adds a request interceptor into axios request interceptors list and returns an ID of the interceptor
+     */
+    public static enableRequestInteceptor(): number {
+        console.log(`CheApiRequestHandler.enableRequestInterceptor`);
+        return axios.interceptors.request.use( request => {
+            if (TestConstants.TS_SELENIUM_LOG_LEVEL === "TRACE") {
+                let request_censored: AxiosRequestConfig = lodash.cloneDeep(request);
+                request_censored.headers['Authorization'] = "CENSORED";
+                console.log(`RequestHandler request:\n`, request_censored);
+            }
+            return request;
+        });
+    }
+
+    /**
+     * This method adds a response interceptor into axios response interceptors list and returns an ID of the interceptor
+     */
+    public static enableResponseInterceptor(): number {
+        console.log(`CheApiRequestHandler.enableResponseRedirects`);
+        return axios.interceptors.response.use( response => {
+            if (TestConstants.TS_SELENIUM_LOG_LEVEL === "TRACE") {
+                let response_censored: AxiosResponse = lodash.cloneDeep(response);
+                response_censored.config.headers["Authorization"] = "CENSORED";
+                response_censored.request = "CENSORED";
+                console.log(`RequestHandler response:\n`, response_censored);
+            }
+            return response;
+        })
+    }
+
     private assembleUrl(relativeUrl: string): string {
         return `${TestConstants.TS_SELENIUM_BASE_URL}/${relativeUrl}`;
     }
